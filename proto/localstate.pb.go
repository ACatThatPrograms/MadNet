// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: localstate.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_localstate_proto protoreflect.FileDescriptor

var file_localstate_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x8b,
	0x0c, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22,
	0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a,
	0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d, 0x66, 0x6f, 0x72,
	0x2d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x10, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0x68, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x4b, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x55, 0x54, 0x58, 0x4f, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x54, 0x58,
	0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x75,
	0x74, 0x78, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x58,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2d, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x64,
	0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0x68, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x2d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x74, 0x78, 0x2d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_localstate_proto_goTypes = []interface{}{
	(*GetDataRequest)(nil),                 // 0: proto.GetDataRequest
	(*GetValueRequest)(nil),                // 1: proto.GetValueRequest
	(*IterateNameSpaceRequest)(nil),        // 2: proto.IterateNameSpaceRequest
	(*MinedTransactionRequest)(nil),        // 3: proto.MinedTransactionRequest
	(*BlockHeaderRequest)(nil),             // 4: proto.BlockHeaderRequest
	(*UTXORequest)(nil),                    // 5: proto.UTXORequest
	(*PendingTransactionRequest)(nil),      // 6: proto.PendingTransactionRequest
	(*RoundStateForValidatorRequest)(nil),  // 7: proto.RoundStateForValidatorRequest
	(*ValidatorSetRequest)(nil),            // 8: proto.ValidatorSetRequest
	(*BlockNumberRequest)(nil),             // 9: proto.BlockNumberRequest
	(*ChainIDRequest)(nil),                 // 10: proto.ChainIDRequest
	(*TransactionData)(nil),                // 11: proto.TransactionData
	(*EpochNumberRequest)(nil),             // 12: proto.EpochNumberRequest
	(*TxBlockNumberRequest)(nil),           // 13: proto.TxBlockNumberRequest
	(*GetDataResponse)(nil),                // 14: proto.GetDataResponse
	(*GetValueResponse)(nil),               // 15: proto.GetValueResponse
	(*IterateNameSpaceResponse)(nil),       // 16: proto.IterateNameSpaceResponse
	(*MinedTransactionResponse)(nil),       // 17: proto.MinedTransactionResponse
	(*BlockHeaderResponse)(nil),            // 18: proto.BlockHeaderResponse
	(*UTXOResponse)(nil),                   // 19: proto.UTXOResponse
	(*PendingTransactionResponse)(nil),     // 20: proto.PendingTransactionResponse
	(*RoundStateForValidatorResponse)(nil), // 21: proto.RoundStateForValidatorResponse
	(*ValidatorSetResponse)(nil),           // 22: proto.ValidatorSetResponse
	(*BlockNumberResponse)(nil),            // 23: proto.BlockNumberResponse
	(*ChainIDResponse)(nil),                // 24: proto.ChainIDResponse
	(*TransactionDetails)(nil),             // 25: proto.TransactionDetails
	(*EpochNumberResponse)(nil),            // 26: proto.EpochNumberResponse
	(*TxBlockNumberResponse)(nil),          // 27: proto.TxBlockNumberResponse
}
var file_localstate_proto_depIdxs = []int32{
	0,  // 0: proto.LocalState.GetData:input_type -> proto.GetDataRequest
	1,  // 1: proto.LocalState.GetValueForOwner:input_type -> proto.GetValueRequest
	2,  // 2: proto.LocalState.IterateNameSpace:input_type -> proto.IterateNameSpaceRequest
	3,  // 3: proto.LocalState.GetMinedTransaction:input_type -> proto.MinedTransactionRequest
	4,  // 4: proto.LocalState.GetBlockHeader:input_type -> proto.BlockHeaderRequest
	5,  // 5: proto.LocalState.GetUTXO:input_type -> proto.UTXORequest
	6,  // 6: proto.LocalState.GetPendingTransaction:input_type -> proto.PendingTransactionRequest
	7,  // 7: proto.LocalState.GetRoundStateForValidator:input_type -> proto.RoundStateForValidatorRequest
	8,  // 8: proto.LocalState.GetValidatorSet:input_type -> proto.ValidatorSetRequest
	9,  // 9: proto.LocalState.GetBlockNumber:input_type -> proto.BlockNumberRequest
	10, // 10: proto.LocalState.GetChainID:input_type -> proto.ChainIDRequest
	11, // 11: proto.LocalState.SendTransaction:input_type -> proto.TransactionData
	12, // 12: proto.LocalState.GetEpochNumber:input_type -> proto.EpochNumberRequest
	13, // 13: proto.LocalState.GetTxBlockNumber:input_type -> proto.TxBlockNumberRequest
	14, // 14: proto.LocalState.GetData:output_type -> proto.GetDataResponse
	15, // 15: proto.LocalState.GetValueForOwner:output_type -> proto.GetValueResponse
	16, // 16: proto.LocalState.IterateNameSpace:output_type -> proto.IterateNameSpaceResponse
	17, // 17: proto.LocalState.GetMinedTransaction:output_type -> proto.MinedTransactionResponse
	18, // 18: proto.LocalState.GetBlockHeader:output_type -> proto.BlockHeaderResponse
	19, // 19: proto.LocalState.GetUTXO:output_type -> proto.UTXOResponse
	20, // 20: proto.LocalState.GetPendingTransaction:output_type -> proto.PendingTransactionResponse
	21, // 21: proto.LocalState.GetRoundStateForValidator:output_type -> proto.RoundStateForValidatorResponse
	22, // 22: proto.LocalState.GetValidatorSet:output_type -> proto.ValidatorSetResponse
	23, // 23: proto.LocalState.GetBlockNumber:output_type -> proto.BlockNumberResponse
	24, // 24: proto.LocalState.GetChainID:output_type -> proto.ChainIDResponse
	25, // 25: proto.LocalState.SendTransaction:output_type -> proto.TransactionDetails
	26, // 26: proto.LocalState.GetEpochNumber:output_type -> proto.EpochNumberResponse
	27, // 27: proto.LocalState.GetTxBlockNumber:output_type -> proto.TxBlockNumberResponse
	14, // [14:28] is the sub-list for method output_type
	0,  // [0:14] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_localstate_proto_init() }
func file_localstate_proto_init() {
	if File_localstate_proto != nil {
		return
	}
	file_localstatetypes_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_localstate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_localstate_proto_goTypes,
		DependencyIndexes: file_localstate_proto_depIdxs,
	}.Build()
	File_localstate_proto = out.File
	file_localstate_proto_rawDesc = nil
	file_localstate_proto_goTypes = nil
	file_localstate_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LocalStateClient is the client API for LocalState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalStateClient interface {
	// Get only the raw data from a datastore UTXO that has been mined into chain
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	// Get a list of UTXOs that sum to at least a minimum of some value where each
	// UTXO has a common owner
	GetValueForOwner(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error)
	// Iterate all datastores in a namespace defined by an owner
	IterateNameSpace(ctx context.Context, in *IterateNameSpaceRequest, opts ...grpc.CallOption) (*IterateNameSpaceResponse, error)
	// Get a mined transaction by hash
	GetMinedTransaction(ctx context.Context, in *MinedTransactionRequest, opts ...grpc.CallOption) (*MinedTransactionResponse, error)
	// Get blockheader by hash or blocknumber
	GetBlockHeader(ctx context.Context, in *BlockHeaderRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error)
	// Get a raw UTXO by TxHash and index or by UTXOID
	GetUTXO(ctx context.Context, in *UTXORequest, opts ...grpc.CallOption) (*UTXOResponse, error)
	// Get a pending transaction by hash
	GetPendingTransaction(ctx context.Context, in *PendingTransactionRequest, opts ...grpc.CallOption) (*PendingTransactionResponse, error)
	// Get the round state object for a specified round for a specified validator
	// This allows tracing the consensus flow.
	GetRoundStateForValidator(ctx context.Context, in *RoundStateForValidatorRequest, opts ...grpc.CallOption) (*RoundStateForValidatorResponse, error)
	// Get the set of validators for a specified block height
	GetValidatorSet(ctx context.Context, in *ValidatorSetRequest, opts ...grpc.CallOption) (*ValidatorSetResponse, error)
	// Get the current block number
	GetBlockNumber(ctx context.Context, in *BlockNumberRequest, opts ...grpc.CallOption) (*BlockNumberResponse, error)
	// Get the current ChainID of the node
	GetChainID(ctx context.Context, in *ChainIDRequest, opts ...grpc.CallOption) (*ChainIDResponse, error)
	// Send a transaction to the node
	SendTransaction(ctx context.Context, in *TransactionData, opts ...grpc.CallOption) (*TransactionDetails, error)
	// Get the current block number
	GetEpochNumber(ctx context.Context, in *EpochNumberRequest, opts ...grpc.CallOption) (*EpochNumberResponse, error)
	// Get the current block number
	GetTxBlockNumber(ctx context.Context, in *TxBlockNumberRequest, opts ...grpc.CallOption) (*TxBlockNumberResponse, error)
}

type localStateClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalStateClient(cc grpc.ClientConnInterface) LocalStateClient {
	return &localStateClient{cc}
}

func (c *localStateClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetValueForOwner(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error) {
	out := new(GetValueResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetValueForOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) IterateNameSpace(ctx context.Context, in *IterateNameSpaceRequest, opts ...grpc.CallOption) (*IterateNameSpaceResponse, error) {
	out := new(IterateNameSpaceResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/IterateNameSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetMinedTransaction(ctx context.Context, in *MinedTransactionRequest, opts ...grpc.CallOption) (*MinedTransactionResponse, error) {
	out := new(MinedTransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetMinedTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetBlockHeader(ctx context.Context, in *BlockHeaderRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error) {
	out := new(BlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetUTXO(ctx context.Context, in *UTXORequest, opts ...grpc.CallOption) (*UTXOResponse, error) {
	out := new(UTXOResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetUTXO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetPendingTransaction(ctx context.Context, in *PendingTransactionRequest, opts ...grpc.CallOption) (*PendingTransactionResponse, error) {
	out := new(PendingTransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetPendingTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetRoundStateForValidator(ctx context.Context, in *RoundStateForValidatorRequest, opts ...grpc.CallOption) (*RoundStateForValidatorResponse, error) {
	out := new(RoundStateForValidatorResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetRoundStateForValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetValidatorSet(ctx context.Context, in *ValidatorSetRequest, opts ...grpc.CallOption) (*ValidatorSetResponse, error) {
	out := new(ValidatorSetResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetValidatorSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetBlockNumber(ctx context.Context, in *BlockNumberRequest, opts ...grpc.CallOption) (*BlockNumberResponse, error) {
	out := new(BlockNumberResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetChainID(ctx context.Context, in *ChainIDRequest, opts ...grpc.CallOption) (*ChainIDResponse, error) {
	out := new(ChainIDResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) SendTransaction(ctx context.Context, in *TransactionData, opts ...grpc.CallOption) (*TransactionDetails, error) {
	out := new(TransactionDetails)
	err := c.cc.Invoke(ctx, "/proto.LocalState/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetEpochNumber(ctx context.Context, in *EpochNumberRequest, opts ...grpc.CallOption) (*EpochNumberResponse, error) {
	out := new(EpochNumberResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetEpochNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStateClient) GetTxBlockNumber(ctx context.Context, in *TxBlockNumberRequest, opts ...grpc.CallOption) (*TxBlockNumberResponse, error) {
	out := new(TxBlockNumberResponse)
	err := c.cc.Invoke(ctx, "/proto.LocalState/GetTxBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalStateServer is the server API for LocalState service.
type LocalStateServer interface {
	// Get only the raw data from a datastore UTXO that has been mined into chain
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	// Get a list of UTXOs that sum to at least a minimum of some value where each
	// UTXO has a common owner
	GetValueForOwner(context.Context, *GetValueRequest) (*GetValueResponse, error)
	// Iterate all datastores in a namespace defined by an owner
	IterateNameSpace(context.Context, *IterateNameSpaceRequest) (*IterateNameSpaceResponse, error)
	// Get a mined transaction by hash
	GetMinedTransaction(context.Context, *MinedTransactionRequest) (*MinedTransactionResponse, error)
	// Get blockheader by hash or blocknumber
	GetBlockHeader(context.Context, *BlockHeaderRequest) (*BlockHeaderResponse, error)
	// Get a raw UTXO by TxHash and index or by UTXOID
	GetUTXO(context.Context, *UTXORequest) (*UTXOResponse, error)
	// Get a pending transaction by hash
	GetPendingTransaction(context.Context, *PendingTransactionRequest) (*PendingTransactionResponse, error)
	// Get the round state object for a specified round for a specified validator
	// This allows tracing the consensus flow.
	GetRoundStateForValidator(context.Context, *RoundStateForValidatorRequest) (*RoundStateForValidatorResponse, error)
	// Get the set of validators for a specified block height
	GetValidatorSet(context.Context, *ValidatorSetRequest) (*ValidatorSetResponse, error)
	// Get the current block number
	GetBlockNumber(context.Context, *BlockNumberRequest) (*BlockNumberResponse, error)
	// Get the current ChainID of the node
	GetChainID(context.Context, *ChainIDRequest) (*ChainIDResponse, error)
	// Send a transaction to the node
	SendTransaction(context.Context, *TransactionData) (*TransactionDetails, error)
	// Get the current block number
	GetEpochNumber(context.Context, *EpochNumberRequest) (*EpochNumberResponse, error)
	// Get the current block number
	GetTxBlockNumber(context.Context, *TxBlockNumberRequest) (*TxBlockNumberResponse, error)
}

// UnimplementedLocalStateServer can be embedded to have forward compatible implementations.
type UnimplementedLocalStateServer struct {
}

func (*UnimplementedLocalStateServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (*UnimplementedLocalStateServer) GetValueForOwner(context.Context, *GetValueRequest) (*GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueForOwner not implemented")
}
func (*UnimplementedLocalStateServer) IterateNameSpace(context.Context, *IterateNameSpaceRequest) (*IterateNameSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IterateNameSpace not implemented")
}
func (*UnimplementedLocalStateServer) GetMinedTransaction(context.Context, *MinedTransactionRequest) (*MinedTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinedTransaction not implemented")
}
func (*UnimplementedLocalStateServer) GetBlockHeader(context.Context, *BlockHeaderRequest) (*BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (*UnimplementedLocalStateServer) GetUTXO(context.Context, *UTXORequest) (*UTXOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUTXO not implemented")
}
func (*UnimplementedLocalStateServer) GetPendingTransaction(context.Context, *PendingTransactionRequest) (*PendingTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingTransaction not implemented")
}
func (*UnimplementedLocalStateServer) GetRoundStateForValidator(context.Context, *RoundStateForValidatorRequest) (*RoundStateForValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoundStateForValidator not implemented")
}
func (*UnimplementedLocalStateServer) GetValidatorSet(context.Context, *ValidatorSetRequest) (*ValidatorSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorSet not implemented")
}
func (*UnimplementedLocalStateServer) GetBlockNumber(context.Context, *BlockNumberRequest) (*BlockNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockNumber not implemented")
}
func (*UnimplementedLocalStateServer) GetChainID(context.Context, *ChainIDRequest) (*ChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainID not implemented")
}
func (*UnimplementedLocalStateServer) SendTransaction(context.Context, *TransactionData) (*TransactionDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedLocalStateServer) GetEpochNumber(context.Context, *EpochNumberRequest) (*EpochNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochNumber not implemented")
}
func (*UnimplementedLocalStateServer) GetTxBlockNumber(context.Context, *TxBlockNumberRequest) (*TxBlockNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxBlockNumber not implemented")
}

func RegisterLocalStateServer(s *grpc.Server, srv LocalStateServer) {
	s.RegisterService(&_LocalState_serviceDesc, srv)
}

func _LocalState_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetValueForOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetValueForOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetValueForOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetValueForOwner(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_IterateNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IterateNameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).IterateNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/IterateNameSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).IterateNameSpace(ctx, req.(*IterateNameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetMinedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinedTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetMinedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetMinedTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetMinedTransaction(ctx, req.(*MinedTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetBlockHeader(ctx, req.(*BlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetUTXO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UTXORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetUTXO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetUTXO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetUTXO(ctx, req.(*UTXORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetPendingTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetPendingTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetPendingTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetPendingTransaction(ctx, req.(*PendingTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetRoundStateForValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundStateForValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetRoundStateForValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetRoundStateForValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetRoundStateForValidator(ctx, req.(*RoundStateForValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetValidatorSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetValidatorSet(ctx, req.(*ValidatorSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetBlockNumber(ctx, req.(*BlockNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetChainID(ctx, req.(*ChainIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).SendTransaction(ctx, req.(*TransactionData))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetEpochNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EpochNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetEpochNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetEpochNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetEpochNumber(ctx, req.(*EpochNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalState_GetTxBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxBlockNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStateServer).GetTxBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocalState/GetTxBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStateServer).GetTxBlockNumber(ctx, req.(*TxBlockNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalState_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LocalState",
	HandlerType: (*LocalStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _LocalState_GetData_Handler,
		},
		{
			MethodName: "GetValueForOwner",
			Handler:    _LocalState_GetValueForOwner_Handler,
		},
		{
			MethodName: "IterateNameSpace",
			Handler:    _LocalState_IterateNameSpace_Handler,
		},
		{
			MethodName: "GetMinedTransaction",
			Handler:    _LocalState_GetMinedTransaction_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _LocalState_GetBlockHeader_Handler,
		},
		{
			MethodName: "GetUTXO",
			Handler:    _LocalState_GetUTXO_Handler,
		},
		{
			MethodName: "GetPendingTransaction",
			Handler:    _LocalState_GetPendingTransaction_Handler,
		},
		{
			MethodName: "GetRoundStateForValidator",
			Handler:    _LocalState_GetRoundStateForValidator_Handler,
		},
		{
			MethodName: "GetValidatorSet",
			Handler:    _LocalState_GetValidatorSet_Handler,
		},
		{
			MethodName: "GetBlockNumber",
			Handler:    _LocalState_GetBlockNumber_Handler,
		},
		{
			MethodName: "GetChainID",
			Handler:    _LocalState_GetChainID_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _LocalState_SendTransaction_Handler,
		},
		{
			MethodName: "GetEpochNumber",
			Handler:    _LocalState_GetEpochNumber_Handler,
		},
		{
			MethodName: "GetTxBlockNumber",
			Handler:    _LocalState_GetTxBlockNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localstate.proto",
}
